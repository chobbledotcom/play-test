#!/usr/bin/env bash

# Git pre-commit hook that runs linters and auto-fixes issues

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Running pre-commit checks on staged files...${NC}"

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
  echo -e "${GREEN}No staged files to check${NC}"
  exit 0
fi

# Separate files by type
RUBY_FILES=""
ERB_FILES=""
JS_FILES=""

while IFS= read -r file; do
  if [[ -f "$file" ]]; then
    case "$file" in
      *.rb)
        RUBY_FILES="$RUBY_FILES $file"
        ;;
      *.erb|*.html.erb)
        ERB_FILES="$ERB_FILES $file"
        ;;
      *.js|*.jsx|*.ts|*.tsx)
        JS_FILES="$JS_FILES $file"
        ;;
    esac
  fi
done <<< "$STAGED_FILES"

# Track if any files were fixed
FILES_FIXED=0

# Run StandardRB on Ruby files with auto-fix
if [ -n "$RUBY_FILES" ]; then
  echo -e "\n${YELLOW}Running StandardRB on staged Ruby files...${NC}"
  
  # First check if there are issues
  if ! bundle exec standardrb $RUBY_FILES &>/dev/null; then
    echo -e "${BLUE}StandardRB found issues, auto-fixing...${NC}"
    bundle exec standardrb --fix $RUBY_FILES
    
    # Re-add fixed files to staging
    for file in $RUBY_FILES; do
      git add "$file"
      FILES_FIXED=1
    done
    echo -e "${GREEN}StandardRB issues fixed and files re-staged${NC}"
  else
    echo -e "${GREEN}StandardRB passed${NC}"
  fi
fi

# Run erb_lint on ERB files with auto-fix
if [ -n "$ERB_FILES" ]; then
  echo -e "\n${YELLOW}Running erb_lint on staged ERB files...${NC}"
  
  # First check if there are issues
  if ! bundle exec erb_lint $ERB_FILES &>/dev/null; then
    echo -e "${BLUE}erb_lint found issues, auto-fixing...${NC}"
    bundle exec erb_lint --autocorrect $ERB_FILES
    
    # Re-add fixed files to staging
    for file in $ERB_FILES; do
      git add "$file"
      FILES_FIXED=1
    done
    echo -e "${GREEN}erb_lint issues fixed and files re-staged${NC}"
  else
    echo -e "${GREEN}erb_lint passed${NC}"
  fi
fi

# Run Biome on JS/TS files with auto-fix if biome.json exists
if [ -n "$JS_FILES" ] && [ -f "biome.json" ]; then
  echo -e "\n${YELLOW}Running Biome on staged JS/TS files...${NC}"
  
  # First check if there are issues
  if ! biome check $JS_FILES &>/dev/null; then
    echo -e "${BLUE}Biome found issues, auto-fixing...${NC}"
    biome check --write $JS_FILES
    
    # Re-add fixed files to staging
    for file in $JS_FILES; do
      git add "$file"
      FILES_FIXED=1
    done
    echo -e "${GREEN}Biome issues fixed and files re-staged${NC}"
  else
    echo -e "${GREEN}Biome passed${NC}"
  fi
fi

# Now check again to see if there are any remaining issues
FAILED=0

if [ -n "$RUBY_FILES" ]; then
  if ! bundle exec standardrb $RUBY_FILES &>/dev/null; then
    echo -e "${RED}StandardRB still has unfixable issues${NC}"
    bundle exec standardrb $RUBY_FILES
    FAILED=1
  fi
fi

if [ -n "$ERB_FILES" ]; then
  if ! bundle exec erb_lint $ERB_FILES &>/dev/null; then
    echo -e "${RED}erb_lint still has unfixable issues${NC}"
    bundle exec erb_lint $ERB_FILES
    FAILED=1
  fi
fi

if [ -n "$JS_FILES" ] && [ -f "biome.json" ]; then
  if ! biome check $JS_FILES &>/dev/null; then
    echo -e "${RED}Biome still has unfixable issues${NC}"
    biome check $JS_FILES
    FAILED=1
  fi
fi

# Summary
if [ $FAILED -eq 0 ]; then
  if [ $FILES_FIXED -eq 1 ]; then
    echo -e "\n${GREEN}✓ All issues auto-fixed and files re-staged!${NC}"
    echo -e "${BLUE}The fixed files have been added to your commit.${NC}"
  else
    echo -e "\n${GREEN}✓ All pre-commit checks passed!${NC}"
  fi
  exit 0
else
  echo -e "\n${RED}✗ Pre-commit checks failed with unfixable issues.${NC}"
  echo ""
  echo "Please fix the issues manually and try again."
  echo ""
  echo "To bypass this hook (not recommended), use:"
  echo "  git commit --no-verify"
  exit 1
fi