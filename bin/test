#!/usr/bin/env bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if any arguments were passed
if [ $# -gt 0 ]; then
    echo -e "${RED}❌ Error: bin/test does not accept arguments${NC}"
    echo -e "${YELLOW}This script runs all tests in parallel.${NC}"
    echo ""
    echo -e "${YELLOW}If you want to run specific tests, use one of these commands:${NC}"
    echo "  rspec path/to/spec.rb                    # Run a specific file"
    echo "  rspec path/to/spec.rb:42                 # Run test at line 42"
    echo "  bin/rspec-find                           # Find first failing test"
    echo "  bin/rspec-find path/to/spec              # Find failures in specific path"
    exit 1
fi

# Track overall test status
overall_result=0

# First, run tests for all gems
for gem_dir in gems/*/; do
    if [ -d "$gem_dir" ] && [ -f "${gem_dir}Gemfile" ]; then
        gem_name=$(basename "$gem_dir")
        echo -e "${BLUE}🔷 Testing gem: ${gem_name}${NC}"
        
        # Create temp file for gem output
        gem_output=$(mktemp)
        
        # Run gem tests
        if (cd "$gem_dir" && bundle exec rspec --format progress) > "$gem_output" 2>&1; then
            echo -e "${GREEN}  ✅ ${gem_name} tests passed!${NC}"
        else
            echo -e "${RED}  ❌ ${gem_name} tests failed!${NC}"
            echo -e "${YELLOW}  📋 Output:${NC}"
            cat "$gem_output" | sed 's/^/    /'
            overall_result=1
        fi
        
        rm -f "$gem_output"
        echo ""
    fi
done

# Then run main app tests
echo -e "${YELLOW}🧪 Running main app tests in parallel...${NC}"

# Create a temporary file to capture the output
temp_output=$(mktemp)

# Run tests and capture all output
if bundle exec parallel_rspec spec/ > "$temp_output" 2>&1; then
    echo -e "${GREEN}✅ Main app tests passed!${NC}"
    
    # Show full output minus coverage noise
    grep -v "Coverage report generated for" "$temp_output" | \
    grep -v "^Line Coverage:" | \
    grep -v "^Branch Coverage:" | \
    grep -v "Stopped processing SimpleCov"
else
    echo -e "${RED}❌ Main app tests failed!${NC}"
    
    # Show full output minus coverage noise
    echo -e "${YELLOW}📋 Full test output:${NC}"
    grep -v "Coverage report generated for" "$temp_output" | \
    grep -v "^Line Coverage:" | \
    grep -v "^Branch Coverage:" | \
    grep -v "Stopped processing SimpleCov"
    
    overall_result=1
fi

# Cleanup
rm -f "$temp_output"
exit $overall_result