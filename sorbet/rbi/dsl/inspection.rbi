# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Inspection`.
# Please instead update this file by running `bin/tapioca dsl Inspection`.


class Inspection
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { returns(ActiveStorage::Attached::One) }
  def cached_pdf; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def cached_pdf=(attachable); end

  sig { returns(ActiveStorage::Attached::One) }
  def photo_1; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def photo_1=(attachable); end

  sig { returns(ActiveStorage::Attached::One) }
  def photo_2; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def photo_2=(attachable); end

  sig { returns(ActiveStorage::Attached::One) }
  def photo_3; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def photo_3=(attachable); end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), String]) }
    def inspection_types; end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(::Inspection)
    end
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Inspection).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Inspection).void)).returns(::Inspection) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(T::Array[::Inspection])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(::Inspection)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Inspection).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Inspection).void)).returns(::Inspection) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(T::Array[::Inspection])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(::Inspection)
    end
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Inspection).void)).returns(::Inspection) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(T::Array[::Inspection])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(::Inspection)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(T::Array[::Inspection])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(::Inspection)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(T::Array[::Inspection])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(::Inspection)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Inspection]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Inspection)) }
    def fifth; end

    sig { returns(::Inspection) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Inspection)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Inspection])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::Inspection).void).returns(T.nilable(::Inspection)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Inspection)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Inspection) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        cursor: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Inspection).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        cursor: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Inspection])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, cursor: primary_key, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        cursor: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Inspection]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        cursor: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Inspection]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, cursor: primary_key, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(T::Array[::Inspection])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(::Inspection)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(T::Array[::Inspection])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(::Inspection)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(T::Array[::Inspection])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(::Inspection)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Inspection)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Inspection) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Inspection) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Inspection)) }
    sig { params(limit: Integer).returns(T::Array[::Inspection]) }
    def first(limit = nil); end

    sig { returns(::Inspection) }
    def first!; end

    sig { returns(T.nilable(::Inspection)) }
    def forty_two; end

    sig { returns(::Inspection) }
    def forty_two!; end

    sig { returns(T.nilable(::Inspection)) }
    def fourth; end

    sig { returns(::Inspection) }
    def fourth!; end

    sig { returns(T::Array[T.untyped]) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        cursor: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        cursor: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, cursor: primary_key, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Inspection)) }
    sig { params(limit: Integer).returns(T::Array[::Inspection]) }
    def last(limit = nil); end

    sig { returns(::Inspection) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Inspection).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Inspection).void)).returns(::Inspection) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(T::Array[::Inspection])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Inspection).void)
      ).returns(::Inspection)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Inspection).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Inspection).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Inspection)) }
    def second; end

    sig { returns(::Inspection) }
    def second!; end

    sig { returns(T.nilable(::Inspection)) }
    def second_to_last; end

    sig { returns(::Inspection) }
    def second_to_last!; end

    sig { returns(::Inspection) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Inspection).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Inspection)) }
    sig { params(limit: Integer).returns(T::Array[::Inspection]) }
    def take(limit = nil); end

    sig { returns(::Inspection) }
    def take!; end

    sig { returns(T.nilable(::Inspection)) }
    def third; end

    sig { returns(::Inspection) }
    def third!; end

    sig { returns(T.nilable(::Inspection)) }
    def third_to_last; end

    sig { returns(::Inspection) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def bouncing_pillow!; end

    sig { returns(T::Boolean) }
    def bouncing_pillow?; end

    sig { void }
    def bouncy_castle!; end

    sig { returns(T::Boolean) }
    def bouncy_castle?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::Assessments::AnchorageAssessment)) }
    def anchorage_assessment; end

    sig { params(value: T.nilable(::Assessments::AnchorageAssessment)).void }
    def anchorage_assessment=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def anchorage_assessment_attributes=(attributes); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::AnchorageAssessment) }
    def build_anchorage_assessment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def build_cached_pdf_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def build_cached_pdf_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::EnclosedAssessment) }
    def build_enclosed_assessment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::FanAssessment) }
    def build_fan_assessment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InspectorCompany) }
    def build_inspector_company(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::MaterialsAssessment) }
    def build_materials_assessment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def build_photo_1_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def build_photo_1_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def build_photo_2_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def build_photo_2_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def build_photo_3_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def build_photo_3_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::SlideAssessment) }
    def build_slide_assessment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::StructureAssessment) }
    def build_structure_assessment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Unit) }
    def build_unit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::UserHeightAssessment) }
    def build_user_height_assessment(*args, &blk); end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def cached_pdf_attachment; end

    sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
    def cached_pdf_attachment=(value); end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def cached_pdf_blob; end

    sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
    def cached_pdf_blob=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::AnchorageAssessment) }
    def create_anchorage_assessment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::AnchorageAssessment) }
    def create_anchorage_assessment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_cached_pdf_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_cached_pdf_attachment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_cached_pdf_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_cached_pdf_blob!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::EnclosedAssessment) }
    def create_enclosed_assessment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::EnclosedAssessment) }
    def create_enclosed_assessment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::FanAssessment) }
    def create_fan_assessment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::FanAssessment) }
    def create_fan_assessment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InspectorCompany) }
    def create_inspector_company(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InspectorCompany) }
    def create_inspector_company!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::MaterialsAssessment) }
    def create_materials_assessment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::MaterialsAssessment) }
    def create_materials_assessment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_photo_1_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_photo_1_attachment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_photo_1_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_photo_1_blob!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_photo_2_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_photo_2_attachment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_photo_2_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_photo_2_blob!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_photo_3_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_photo_3_attachment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_photo_3_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_photo_3_blob!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::SlideAssessment) }
    def create_slide_assessment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::SlideAssessment) }
    def create_slide_assessment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::StructureAssessment) }
    def create_structure_assessment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::StructureAssessment) }
    def create_structure_assessment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Unit) }
    def create_unit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Unit) }
    def create_unit!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::UserHeightAssessment) }
    def create_user_height_assessment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Assessments::UserHeightAssessment) }
    def create_user_height_assessment!(*args, &blk); end

    sig { returns(T.nilable(::Assessments::EnclosedAssessment)) }
    def enclosed_assessment; end

    sig { params(value: T.nilable(::Assessments::EnclosedAssessment)).void }
    def enclosed_assessment=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def enclosed_assessment_attributes=(attributes); end

    sig { returns(T.nilable(::Assessments::FanAssessment)) }
    def fan_assessment; end

    sig { params(value: T.nilable(::Assessments::FanAssessment)).void }
    def fan_assessment=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def fan_assessment_attributes=(attributes); end

    sig { returns(T.nilable(::InspectorCompany)) }
    def inspector_company; end

    sig { params(value: T.nilable(::InspectorCompany)).void }
    def inspector_company=(value); end

    sig { returns(T::Boolean) }
    def inspector_company_changed?; end

    sig { returns(T::Boolean) }
    def inspector_company_previously_changed?; end

    sig { returns(T.nilable(::Assessments::MaterialsAssessment)) }
    def materials_assessment; end

    sig { params(value: T.nilable(::Assessments::MaterialsAssessment)).void }
    def materials_assessment=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def materials_assessment_attributes=(attributes); end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def photo_1_attachment; end

    sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
    def photo_1_attachment=(value); end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def photo_1_blob; end

    sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
    def photo_1_blob=(value); end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def photo_2_attachment; end

    sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
    def photo_2_attachment=(value); end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def photo_2_blob; end

    sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
    def photo_2_blob=(value); end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def photo_3_attachment; end

    sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
    def photo_3_attachment=(value); end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def photo_3_blob; end

    sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
    def photo_3_blob=(value); end

    sig { returns(T.nilable(::Assessments::AnchorageAssessment)) }
    def reload_anchorage_assessment; end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def reload_cached_pdf_attachment; end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def reload_cached_pdf_blob; end

    sig { returns(T.nilable(::Assessments::EnclosedAssessment)) }
    def reload_enclosed_assessment; end

    sig { returns(T.nilable(::Assessments::FanAssessment)) }
    def reload_fan_assessment; end

    sig { returns(T.nilable(::InspectorCompany)) }
    def reload_inspector_company; end

    sig { returns(T.nilable(::Assessments::MaterialsAssessment)) }
    def reload_materials_assessment; end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def reload_photo_1_attachment; end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def reload_photo_1_blob; end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def reload_photo_2_attachment; end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def reload_photo_2_blob; end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def reload_photo_3_attachment; end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def reload_photo_3_blob; end

    sig { returns(T.nilable(::Assessments::SlideAssessment)) }
    def reload_slide_assessment; end

    sig { returns(T.nilable(::Assessments::StructureAssessment)) }
    def reload_structure_assessment; end

    sig { returns(T.nilable(::Unit)) }
    def reload_unit; end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::Assessments::UserHeightAssessment)) }
    def reload_user_height_assessment; end

    sig { void }
    def reset_anchorage_assessment; end

    sig { void }
    def reset_cached_pdf_attachment; end

    sig { void }
    def reset_cached_pdf_blob; end

    sig { void }
    def reset_enclosed_assessment; end

    sig { void }
    def reset_fan_assessment; end

    sig { void }
    def reset_inspector_company; end

    sig { void }
    def reset_materials_assessment; end

    sig { void }
    def reset_photo_1_attachment; end

    sig { void }
    def reset_photo_1_blob; end

    sig { void }
    def reset_photo_2_attachment; end

    sig { void }
    def reset_photo_2_blob; end

    sig { void }
    def reset_photo_3_attachment; end

    sig { void }
    def reset_photo_3_blob; end

    sig { void }
    def reset_slide_assessment; end

    sig { void }
    def reset_structure_assessment; end

    sig { void }
    def reset_unit; end

    sig { void }
    def reset_user; end

    sig { void }
    def reset_user_height_assessment; end

    sig { returns(T.nilable(::Assessments::SlideAssessment)) }
    def slide_assessment; end

    sig { params(value: T.nilable(::Assessments::SlideAssessment)).void }
    def slide_assessment=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def slide_assessment_attributes=(attributes); end

    sig { returns(T.nilable(::Assessments::StructureAssessment)) }
    def structure_assessment; end

    sig { params(value: T.nilable(::Assessments::StructureAssessment)).void }
    def structure_assessment=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def structure_assessment_attributes=(attributes); end

    sig { returns(T.nilable(::Unit)) }
    def unit; end

    sig { params(value: T.nilable(::Unit)).void }
    def unit=(value); end

    sig { returns(T::Boolean) }
    def unit_changed?; end

    sig { returns(T::Boolean) }
    def unit_previously_changed?; end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end

    sig { returns(T::Boolean) }
    def user_changed?; end

    sig { returns(T.nilable(::Assessments::UserHeightAssessment)) }
    def user_height_assessment; end

    sig { params(value: T.nilable(::Assessments::UserHeightAssessment)).void }
    def user_height_assessment=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def user_height_assessment_attributes=(attributes); end

    sig { returns(T::Boolean) }
    def user_previously_changed?; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def bouncing_pillow(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def bouncy_castle(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def complete(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_date_range(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_operator(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_result(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_unit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def non_seed_data(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_bouncing_pillow(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_bouncy_castle(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def overdue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def passed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def search(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def seed_data(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::Inspection).returns(BasicObject)).returns(T::Array[::Inspection]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_attached_cached_pdf(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_attached_photo_1(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_attached_photo_2(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_attached_photo_3(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def complete_date; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def complete_date=(value); end

    sig { returns(T::Boolean) }
    def complete_date?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def complete_date_before_last_save; end

    sig { returns(T.untyped) }
    def complete_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def complete_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def complete_date_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def complete_date_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def complete_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def complete_date_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def complete_date_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def complete_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def complete_date_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def complete_date_was; end

    sig { void }
    def complete_date_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_slide; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def has_slide=(value); end

    sig { returns(T::Boolean) }
    def has_slide?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_slide_before_last_save; end

    sig { returns(T.untyped) }
    def has_slide_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_slide_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_slide_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_slide_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def has_slide_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_slide_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def has_slide_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def has_slide_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_slide_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_slide_was; end

    sig { void }
    def has_slide_will_change!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def height; end

    sig { params(value: T.nilable(::BigDecimal)).returns(T.nilable(::BigDecimal)) }
    def height=(value); end

    sig { returns(T::Boolean) }
    def height?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def height_before_last_save; end

    sig { returns(T.untyped) }
    def height_before_type_cast; end

    sig { returns(T::Boolean) }
    def height_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def height_change; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def height_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def height_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def height_comment; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def height_comment=(value); end

    sig { returns(T::Boolean) }
    def height_comment?; end

    sig { returns(T.nilable(::String)) }
    def height_comment_before_last_save; end

    sig { returns(T.untyped) }
    def height_comment_before_type_cast; end

    sig { returns(T::Boolean) }
    def height_comment_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def height_comment_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def height_comment_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def height_comment_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def height_comment_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def height_comment_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def height_comment_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def height_comment_previously_was; end

    sig { returns(T.nilable(::String)) }
    def height_comment_was; end

    sig { void }
    def height_comment_will_change!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def height_in_database; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def height_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def height_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def height_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def height_was; end

    sig { void }
    def height_will_change!; end

    sig { returns(::String) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(::String) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def indoor_only; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def indoor_only=(value); end

    sig { returns(T::Boolean) }
    def indoor_only?; end

    sig { returns(T.nilable(T::Boolean)) }
    def indoor_only_before_last_save; end

    sig { returns(T.untyped) }
    def indoor_only_before_type_cast; end

    sig { returns(T::Boolean) }
    def indoor_only_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def indoor_only_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def indoor_only_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def indoor_only_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def indoor_only_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def indoor_only_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def indoor_only_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def indoor_only_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def indoor_only_was; end

    sig { void }
    def indoor_only_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def inspection_date; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def inspection_date=(value); end

    sig { returns(T::Boolean) }
    def inspection_date?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def inspection_date_before_last_save; end

    sig { returns(T.untyped) }
    def inspection_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def inspection_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def inspection_date_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def inspection_date_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def inspection_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def inspection_date_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def inspection_date_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def inspection_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def inspection_date_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def inspection_date_was; end

    sig { void }
    def inspection_date_will_change!; end

    sig { returns(::String) }
    def inspection_type; end

    sig { params(value: T.any(::String, ::Symbol)).returns(T.any(::String, ::Symbol)) }
    def inspection_type=(value); end

    sig { returns(T::Boolean) }
    def inspection_type?; end

    sig { returns(T.nilable(::String)) }
    def inspection_type_before_last_save; end

    sig { returns(T.untyped) }
    def inspection_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def inspection_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def inspection_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def inspection_type_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def inspection_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def inspection_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def inspection_type_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def inspection_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def inspection_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def inspection_type_was; end

    sig { void }
    def inspection_type_will_change!; end

    sig { returns(T.nilable(::String)) }
    def inspector_company_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def inspector_company_id=(value); end

    sig { returns(T::Boolean) }
    def inspector_company_id?; end

    sig { returns(T.nilable(::String)) }
    def inspector_company_id_before_last_save; end

    sig { returns(T.untyped) }
    def inspector_company_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def inspector_company_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def inspector_company_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def inspector_company_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def inspector_company_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def inspector_company_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def inspector_company_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def inspector_company_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def inspector_company_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def inspector_company_id_was; end

    sig { void }
    def inspector_company_id_will_change!; end

    sig { returns(T::Boolean) }
    def is_seed; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def is_seed=(value); end

    sig { returns(T::Boolean) }
    def is_seed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_seed_before_last_save; end

    sig { returns(T.untyped) }
    def is_seed_before_type_cast; end

    sig { returns(T::Boolean) }
    def is_seed_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_seed_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_seed_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def is_seed_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_seed_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def is_seed_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def is_seed_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_seed_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_seed_was; end

    sig { void }
    def is_seed_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_totally_enclosed; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def is_totally_enclosed=(value); end

    sig { returns(T::Boolean) }
    def is_totally_enclosed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_totally_enclosed_before_last_save; end

    sig { returns(T.untyped) }
    def is_totally_enclosed_before_type_cast; end

    sig { returns(T::Boolean) }
    def is_totally_enclosed_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def is_totally_enclosed_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def is_totally_enclosed_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def is_totally_enclosed_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_totally_enclosed_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def is_totally_enclosed_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def is_totally_enclosed_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def is_totally_enclosed_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def is_totally_enclosed_was; end

    sig { void }
    def is_totally_enclosed_will_change!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def length; end

    sig { params(value: T.nilable(::BigDecimal)).returns(T.nilable(::BigDecimal)) }
    def length=(value); end

    sig { returns(T::Boolean) }
    def length?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def length_before_last_save; end

    sig { returns(T.untyped) }
    def length_before_type_cast; end

    sig { returns(T::Boolean) }
    def length_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def length_change; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def length_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def length_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def length_comment; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def length_comment=(value); end

    sig { returns(T::Boolean) }
    def length_comment?; end

    sig { returns(T.nilable(::String)) }
    def length_comment_before_last_save; end

    sig { returns(T.untyped) }
    def length_comment_before_type_cast; end

    sig { returns(T::Boolean) }
    def length_comment_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def length_comment_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def length_comment_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def length_comment_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def length_comment_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def length_comment_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def length_comment_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def length_comment_previously_was; end

    sig { returns(T.nilable(::String)) }
    def length_comment_was; end

    sig { void }
    def length_comment_will_change!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def length_in_database; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def length_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def length_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def length_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def length_was; end

    sig { void }
    def length_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def passed; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def passed=(value); end

    sig { returns(T::Boolean) }
    def passed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def passed_before_last_save; end

    sig { returns(T.untyped) }
    def passed_before_type_cast; end

    sig { returns(T::Boolean) }
    def passed_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def passed_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def passed_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def passed_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def passed_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def passed_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def passed_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def passed_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def passed_was; end

    sig { void }
    def passed_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pdf_last_accessed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pdf_last_accessed_at=(value); end

    sig { returns(T::Boolean) }
    def pdf_last_accessed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pdf_last_accessed_at_before_last_save; end

    sig { returns(T.untyped) }
    def pdf_last_accessed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def pdf_last_accessed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pdf_last_accessed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pdf_last_accessed_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def pdf_last_accessed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pdf_last_accessed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def pdf_last_accessed_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def pdf_last_accessed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pdf_last_accessed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def pdf_last_accessed_at_was; end

    sig { void }
    def pdf_last_accessed_at_will_change!; end

    sig { void }
    def restore_complete_date!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_has_slide!; end

    sig { void }
    def restore_height!; end

    sig { void }
    def restore_height_comment!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_indoor_only!; end

    sig { void }
    def restore_inspection_date!; end

    sig { void }
    def restore_inspection_type!; end

    sig { void }
    def restore_inspector_company_id!; end

    sig { void }
    def restore_is_seed!; end

    sig { void }
    def restore_is_totally_enclosed!; end

    sig { void }
    def restore_length!; end

    sig { void }
    def restore_length_comment!; end

    sig { void }
    def restore_passed!; end

    sig { void }
    def restore_pdf_last_accessed_at!; end

    sig { void }
    def restore_risk_assessment!; end

    sig { void }
    def restore_unit_id!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_id!; end

    sig { void }
    def restore_width!; end

    sig { void }
    def restore_width_comment!; end

    sig { returns(T.nilable(::String)) }
    def risk_assessment; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def risk_assessment=(value); end

    sig { returns(T::Boolean) }
    def risk_assessment?; end

    sig { returns(T.nilable(::String)) }
    def risk_assessment_before_last_save; end

    sig { returns(T.untyped) }
    def risk_assessment_before_type_cast; end

    sig { returns(T::Boolean) }
    def risk_assessment_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def risk_assessment_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def risk_assessment_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def risk_assessment_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def risk_assessment_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def risk_assessment_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def risk_assessment_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def risk_assessment_previously_was; end

    sig { returns(T.nilable(::String)) }
    def risk_assessment_was; end

    sig { void }
    def risk_assessment_will_change!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_complete_date; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_complete_date?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_created_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_has_slide; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_has_slide?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def saved_change_to_height; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_height?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_height_comment; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_height_comment?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id_value; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_id_value?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_indoor_only; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_indoor_only?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_inspection_date; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_inspection_date?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_inspection_type; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_inspection_type?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_inspector_company_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_inspector_company_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_is_seed; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_is_seed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_is_totally_enclosed; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_is_totally_enclosed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def saved_change_to_length; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_length?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_length_comment; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_length_comment?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_passed; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_passed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_pdf_last_accessed_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_pdf_last_accessed_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_risk_assessment; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_risk_assessment?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_unit_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_unit_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_updated_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_user_id; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_user_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def saved_change_to_width; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_width?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_width_comment; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def saved_change_to_width_comment?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def unit_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def unit_id=(value); end

    sig { returns(T::Boolean) }
    def unit_id?; end

    sig { returns(T.nilable(::String)) }
    def unit_id_before_last_save; end

    sig { returns(T.untyped) }
    def unit_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def unit_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unit_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unit_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def unit_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def unit_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unit_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def unit_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def unit_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def unit_id_was; end

    sig { void }
    def unit_id_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::String) }
    def user_id; end

    sig { params(value: ::String).returns(::String) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::String)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def user_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def user_id_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def user_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def user_id_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def width; end

    sig { params(value: T.nilable(::BigDecimal)).returns(T.nilable(::BigDecimal)) }
    def width=(value); end

    sig { returns(T::Boolean) }
    def width?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def width_before_last_save; end

    sig { returns(T.untyped) }
    def width_before_type_cast; end

    sig { returns(T::Boolean) }
    def width_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def width_change; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def width_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def width_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def width_comment; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def width_comment=(value); end

    sig { returns(T::Boolean) }
    def width_comment?; end

    sig { returns(T.nilable(::String)) }
    def width_comment_before_last_save; end

    sig { returns(T.untyped) }
    def width_comment_before_type_cast; end

    sig { returns(T::Boolean) }
    def width_comment_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def width_comment_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def width_comment_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def width_comment_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def width_comment_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def width_comment_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def width_comment_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def width_comment_previously_was; end

    sig { returns(T.nilable(::String)) }
    def width_comment_was; end

    sig { void }
    def width_comment_will_change!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def width_in_database; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def width_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def width_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def width_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def width_was; end

    sig { void }
    def width_will_change!; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_complete_date?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_created_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_has_slide?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_height?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_height_comment?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_id_value?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_indoor_only?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_inspection_date?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_inspection_type?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_inspector_company_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_is_seed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_is_totally_enclosed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_length?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_length_comment?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_passed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_pdf_last_accessed_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_risk_assessment?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_unit_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_updated_at?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_user_id?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_width?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def will_save_change_to_width_comment?(from: T.unsafe(nil), to: T.unsafe(nil)); end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def bouncing_pillow(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def bouncy_castle(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def complete(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def draft(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_date_range(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_operator(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_result(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_unit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def non_seed_data(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_bouncing_pillow(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_bouncy_castle(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def overdue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def passed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def search(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def seed_data(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::Inspection).returns(BasicObject)).returns(T::Array[::Inspection]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_attached_cached_pdf(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_attached_photo_1(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_attached_photo_2(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_attached_photo_3(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Inspection } }

    sig { returns(T::Array[::Inspection]) }
    def to_a; end

    sig { returns(T::Array[::Inspection]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Inspection } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Inspection } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Inspection } }

    sig do
      params(
        records: T.any(::Inspection, T::Enumerable[T.any(::Inspection, T::Enumerable[::Inspection])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Inspection, T::Enumerable[T.any(::Inspection, T::Enumerable[::Inspection])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Inspection, T::Enumerable[T.any(::Inspection, T::Enumerable[::Inspection])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Inspection]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Inspection, T::Enumerable[T.any(::Inspection, T::Enumerable[::Inspection])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Inspection, T::Enumerable[T.any(::Inspection, T::Enumerable[::Inspection])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Inspection, T::Enumerable[T.any(::Inspection, T::Enumerable[::Inspection])])
      ).returns(T::Array[::Inspection])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Inspection]) }
    def target; end

    sig { returns(T::Array[::Inspection]) }
    def to_a; end

    sig { returns(T::Array[::Inspection]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Inspection } }

    sig { returns(T::Array[::Inspection]) }
    def to_a; end

    sig { returns(T::Array[::Inspection]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Inspection } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Inspection } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
